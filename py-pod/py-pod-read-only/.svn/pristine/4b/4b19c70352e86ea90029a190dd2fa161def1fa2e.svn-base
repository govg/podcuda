<?xml version="1.0" encoding="ascii"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>pod.vecspace</title>
  <link rel="stylesheet" href="epydoc.css" type="text/css" />
  <script type="text/javascript" src="epydoc.js"></script>
</head>

<body bgcolor="white" text="black" link="blue" vlink="#204080"
      alink="#204080">
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="pod-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Project homepage -->
      <th class="navbar" align="right" width="100%">
        <table border="0" cellpadding="0" cellspacing="0">
          <tr><th class="navbar" align="center"
            ><a class="navbar" target="_top" href="https://code.google.com/p/py-pod/">py-pod</a></th>
          </tr></table></th>
  </tr>
</table>
<table width="100%" cellpadding="0" cellspacing="0">
  <tr valign="top">
    <td width="100%">
      <span class="breadcrumbs">
        <a href="pod-module.html">Package&nbsp;pod</a> ::
        Module&nbsp;vecspace
      </span>
    </td>
    <td>
      <table cellpadding="0" cellspacing="0">
        <!-- hide/show private -->
        <tr><td align="right"><span class="options"
            >[<a href="frames.html" target="_top">frames</a
            >]&nbsp;|&nbsp;<a href="pod.vecspace-pysrc.html"
            target="_top">no&nbsp;frames</a>]</span></td></tr>
      </table>
    </td>
  </tr>
</table>
<h1 class="epydoc">Source Code for <a href="pod.vecspace-module.html" onclick="show_private();">Module pod.vecspace</a></h1>
<pre class="py-src">
<a name="L1"></a><tt class="py-lineno">  1</tt>  <tt class="py-line"><tt class="py-docstring">"""</tt> </tt>
<a name="L2"></a><tt class="py-lineno">  2</tt>  <tt class="py-line"><tt class="py-docstring">Toolbox for handling projections onto linear varieties.</tt> </tt>
<a name="L3"></a><tt class="py-lineno">  3</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L4"></a><tt class="py-lineno">  4</tt>  <tt class="py-line"><tt class="py-docstring">@author: Christophe Alexandre &lt;ch.alexandre at bluewin dot ch&gt;</tt> </tt>
<a name="L5"></a><tt class="py-lineno">  5</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L6"></a><tt class="py-lineno">  6</tt>  <tt class="py-line"><tt class="py-docstring">@license:</tt> </tt>
<a name="L7"></a><tt class="py-lineno">  7</tt>  <tt class="py-line"><tt class="py-docstring">Copyright(C) 2010 Christophe Alexandre</tt> </tt>
<a name="L8"></a><tt class="py-lineno">  8</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L9"></a><tt class="py-lineno">  9</tt>  <tt class="py-line"><tt class="py-docstring">This program is free software: you can redistribute it and/or modify</tt> </tt>
<a name="L10"></a><tt class="py-lineno"> 10</tt>  <tt class="py-line"><tt class="py-docstring">it under the terms of the GNU Lesser General Public License as published by</tt> </tt>
<a name="L11"></a><tt class="py-lineno"> 11</tt>  <tt class="py-line"><tt class="py-docstring">the Free Software Foundation, either version 3 of the License, or</tt> </tt>
<a name="L12"></a><tt class="py-lineno"> 12</tt>  <tt class="py-line"><tt class="py-docstring">(at your option) any later version.</tt> </tt>
<a name="L13"></a><tt class="py-lineno"> 13</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L14"></a><tt class="py-lineno"> 14</tt>  <tt class="py-line"><tt class="py-docstring">This program is distributed in the hope that it will be useful,</tt> </tt>
<a name="L15"></a><tt class="py-lineno"> 15</tt>  <tt class="py-line"><tt class="py-docstring">but WITHOUT ANY WARRANTY; without even the implied warranty of</tt> </tt>
<a name="L16"></a><tt class="py-lineno"> 16</tt>  <tt class="py-line"><tt class="py-docstring">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</tt> </tt>
<a name="L17"></a><tt class="py-lineno"> 17</tt>  <tt class="py-line"><tt class="py-docstring">GNU General Public License for more details.</tt> </tt>
<a name="L18"></a><tt class="py-lineno"> 18</tt>  <tt class="py-line"><tt class="py-docstring"></tt> </tt>
<a name="L19"></a><tt class="py-lineno"> 19</tt>  <tt class="py-line"><tt class="py-docstring">You should have received a copy of the GNU Lesser General Public License</tt> </tt>
<a name="L20"></a><tt class="py-lineno"> 20</tt>  <tt class="py-line"><tt class="py-docstring">along with this program.  If not, see &lt;http://www.gnu.org/licenses/lgpl.txt&gt;.</tt> </tt>
<a name="L21"></a><tt class="py-lineno"> 21</tt>  <tt class="py-line"><tt class="py-docstring">"""</tt> </tt>
<a name="L22"></a><tt class="py-lineno"> 22</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt class="py-name">logging</tt> </tt>
<a name="L23"></a><tt class="py-lineno"> 23</tt>  <tt class="py-line"> </tt>
<a name="L24"></a><tt class="py-lineno"> 24</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt id="link-0" class="py-name" targets="Module pod.linalg=pod.linalg-module.html"><a title="pod.linalg" class="py-name" href="#" onclick="return doclink('link-0', 'linalg', 'link-0');">linalg</a></tt> </tt>
<a name="L25"></a><tt class="py-lineno"> 25</tt>  <tt class="py-line"><tt class="py-keyword">import</tt> <tt id="link-1" class="py-name" targets="Module pod.util=pod.util-module.html"><a title="pod.util" class="py-name" href="#" onclick="return doclink('link-1', 'util', 'link-1');">util</a></tt> </tt>
<a name="L26"></a><tt class="py-lineno"> 26</tt>  <tt class="py-line"> </tt>
<a name="L27"></a><tt class="py-lineno"> 27</tt>  <tt class="py-line"><tt id="link-2" class="py-name" targets="Variable pod._h=pod-module.html#_h,Variable pod.linalg._h=pod.linalg-module.html#_h,Variable pod.util._h=pod.util-module.html#_h,Variable pod.vecspace._h=pod.vecspace-module.html#_h"><a title="pod._h
pod.linalg._h
pod.util._h
pod.vecspace._h" class="py-name" href="#" onclick="return doclink('link-2', '_h', 'link-2');">_h</a></tt> <tt class="py-op">=</tt> <tt id="link-3" class="py-name"><a title="pod.util" class="py-name" href="#" onclick="return doclink('link-3', 'util', 'link-1');">util</a></tt><tt class="py-op">.</tt><tt id="link-4" class="py-name" targets="Class pod.util.NullHandler=pod.util.NullHandler-class.html"><a title="pod.util.NullHandler" class="py-name" href="#" onclick="return doclink('link-4', 'NullHandler', 'link-4');">NullHandler</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L28"></a><tt class="py-lineno"> 28</tt>  <tt class="py-line"><tt id="link-5" class="py-name" targets="Variable pod._logger=pod-module.html#_logger,Variable pod.linalg._logger=pod.linalg-module.html#_logger,Variable pod.util._logger=pod.util-module.html#_logger,Variable pod.vecspace._logger=pod.vecspace-module.html#_logger"><a title="pod._logger
pod.linalg._logger
pod.util._logger
pod.vecspace._logger" class="py-name" href="#" onclick="return doclink('link-5', '_logger', 'link-5');">_logger</a></tt> <tt class="py-op">=</tt> <tt class="py-name">logging</tt><tt class="py-op">.</tt><tt class="py-name">getLogger</tt><tt class="py-op">(</tt><tt class="py-string">'vecspace'</tt><tt class="py-op">)</tt> </tt>
<a name="L29"></a><tt class="py-lineno"> 29</tt>  <tt class="py-line"><tt id="link-6" class="py-name"><a title="pod._logger
pod.linalg._logger
pod.util._logger
pod.vecspace._logger" class="py-name" href="#" onclick="return doclink('link-6', '_logger', 'link-5');">_logger</a></tt><tt class="py-op">.</tt><tt class="py-name">addHandler</tt><tt class="py-op">(</tt><tt id="link-7" class="py-name"><a title="pod._h
pod.linalg._h
pod.util._h
pod.vecspace._h" class="py-name" href="#" onclick="return doclink('link-7', '_h', 'link-2');">_h</a></tt><tt class="py-op">)</tt> </tt>
<a name="L30"></a><tt class="py-lineno"> 30</tt>  <tt class="py-line"> </tt>
<a name="VectorSpace"></a><div id="VectorSpace-def"><a name="L31"></a><tt class="py-lineno"> 31</tt> <a class="py-toggle" href="#" id="VectorSpace-toggle" onclick="return toggle('VectorSpace');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="pod.vecspace.VectorSpace-class.html">VectorSpace</a><tt class="py-op">(</tt><tt class="py-base-class">object</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSpace-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="VectorSpace-expanded"><a name="L32"></a><tt class="py-lineno"> 32</tt>  <tt class="py-line">  <tt class="py-docstring">"""</tt> </tt>
<a name="L33"></a><tt class="py-lineno"> 33</tt>  <tt class="py-line"><tt class="py-docstring">  Essentially a factory for geometrical objects.</tt> </tt>
<a name="L34"></a><tt class="py-lineno"> 34</tt>  <tt class="py-line"><tt class="py-docstring">  </tt> </tt>
<a name="L35"></a><tt class="py-lineno"> 35</tt>  <tt class="py-line"><tt class="py-docstring">  Joining an origin to a linear variety would create a VectorSpace.</tt> </tt>
<a name="L36"></a><tt class="py-lineno"> 36</tt>  <tt class="py-line"><tt class="py-docstring">  """</tt>   </tt>
<a name="VectorSpace.__init__"></a><div id="VectorSpace.__init__-def"><a name="L37"></a><tt class="py-lineno"> 37</tt> <a class="py-toggle" href="#" id="VectorSpace.__init__-toggle" onclick="return toggle('VectorSpace.__init__');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.VectorSpace-class.html#__init__">__init__</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">dimension</tt><tt class="py-op">,</tt> <tt class="py-param">basis</tt><tt class="py-op">=</tt><tt class="py-name">None</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSpace.__init__-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="VectorSpace.__init__-expanded"><a name="L38"></a><tt class="py-lineno"> 38</tt>  <tt class="py-line">    <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">dimension</tt> <tt class="py-op">=</tt> <tt class="py-name">dimension</tt> </tt>
<a name="L39"></a><tt class="py-lineno"> 39</tt>  <tt class="py-line">    <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">origin</tt> <tt class="py-op">=</tt> <tt id="link-8" class="py-name"><a title="pod.linalg" class="py-name" href="#" onclick="return doclink('link-8', 'linalg', 'link-0');">linalg</a></tt><tt class="py-op">.</tt><tt id="link-9" class="py-name" targets="Function pod.linalg.zero()=pod.linalg-module.html#zero"><a title="pod.linalg.zero" class="py-name" href="#" onclick="return doclink('link-9', 'zero', 'link-9');">zero</a></tt><tt class="py-op">(</tt><tt class="py-name">dimension</tt><tt class="py-op">)</tt> </tt>
</div><a name="L40"></a><tt class="py-lineno"> 40</tt>  <tt class="py-line">     </tt>
<a name="VectorSpace.get_dimension"></a><div id="VectorSpace.get_dimension-def"><a name="L41"></a><tt class="py-lineno"> 41</tt> <a class="py-toggle" href="#" id="VectorSpace.get_dimension-toggle" onclick="return toggle('VectorSpace.get_dimension');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.VectorSpace-class.html#get_dimension">get_dimension</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSpace.get_dimension-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="VectorSpace.get_dimension-expanded"><a name="L42"></a><tt class="py-lineno"> 42</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">dimension</tt> </tt>
</div><a name="L43"></a><tt class="py-lineno"> 43</tt>  <tt class="py-line">     </tt>
<a name="VectorSpace.define_point"></a><div id="VectorSpace.define_point-def"><a name="L44"></a><tt class="py-lineno"> 44</tt> <a class="py-toggle" href="#" id="VectorSpace.define_point-toggle" onclick="return toggle('VectorSpace.define_point');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.VectorSpace-class.html#define_point">define_point</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-op">*</tt><tt class="py-param">coordinates</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSpace.define_point-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="VectorSpace.define_point-expanded"><a name="L45"></a><tt class="py-lineno"> 45</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt id="link-10" class="py-name"><a title="pod.linalg" class="py-name" href="#" onclick="return doclink('link-10', 'linalg', 'link-0');">linalg</a></tt><tt class="py-op">.</tt><tt id="link-11" class="py-name" targets="Class pod.linalg.Point=pod.linalg.Point-class.html"><a title="pod.linalg.Point" class="py-name" href="#" onclick="return doclink('link-11', 'Point', 'link-11');">Point</a></tt><tt class="py-op">(</tt><tt class="py-op">*</tt><tt class="py-name">coordinates</tt><tt class="py-op">)</tt> </tt>
</div><a name="L46"></a><tt class="py-lineno"> 46</tt>  <tt class="py-line">   </tt>
<a name="VectorSpace.define_hyper_plane"></a><div id="VectorSpace.define_hyper_plane-def"><a name="L47"></a><tt class="py-lineno"> 47</tt> <a class="py-toggle" href="#" id="VectorSpace.define_hyper_plane-toggle" onclick="return toggle('VectorSpace.define_hyper_plane');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.VectorSpace-class.html#define_hyper_plane">define_hyper_plane</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-op">*</tt><tt class="py-param">points</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSpace.define_hyper_plane-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="VectorSpace.define_hyper_plane-expanded"><a name="L48"></a><tt class="py-lineno"> 48</tt>  <tt class="py-line">    <tt class="py-name">hp</tt> <tt class="py-op">=</tt> <tt id="link-12" class="py-name" targets="Class pod.vecspace.HyperPlane=pod.vecspace.HyperPlane-class.html"><a title="pod.vecspace.HyperPlane" class="py-name" href="#" onclick="return doclink('link-12', 'HyperPlane', 'link-12');">HyperPlane</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">dimension</tt><tt class="py-op">)</tt> </tt>
<a name="L49"></a><tt class="py-lineno"> 49</tt>  <tt class="py-line">    <tt class="py-name">hp</tt><tt class="py-op">.</tt><tt id="link-13" class="py-name" targets="Method pod.vecspace.LinearVariety.init_points()=pod.vecspace.LinearVariety-class.html#init_points"><a title="pod.vecspace.LinearVariety.init_points" class="py-name" href="#" onclick="return doclink('link-13', 'init_points', 'link-13');">init_points</a></tt><tt class="py-op">(</tt><tt class="py-op">*</tt><tt class="py-name">points</tt><tt class="py-op">)</tt> </tt>
<a name="L50"></a><tt class="py-lineno"> 50</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">hp</tt> </tt>
</div><a name="L51"></a><tt class="py-lineno"> 51</tt>  <tt class="py-line">     </tt>
<a name="VectorSpace.define_line"></a><div id="VectorSpace.define_line-def"><a name="L52"></a><tt class="py-lineno"> 52</tt> <a class="py-toggle" href="#" id="VectorSpace.define_line-toggle" onclick="return toggle('VectorSpace.define_line');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.VectorSpace-class.html#define_line">define_line</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">p0</tt><tt class="py-op">,</tt> <tt class="py-param">p1</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSpace.define_line-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="VectorSpace.define_line-expanded"><a name="L53"></a><tt class="py-lineno"> 53</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L54"></a><tt class="py-lineno"> 54</tt>  <tt class="py-line"><tt class="py-docstring">    Straight line in a n dim space given 2 points.</tt> </tt>
<a name="L55"></a><tt class="py-lineno"> 55</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L56"></a><tt class="py-lineno"> 56</tt>  <tt class="py-line">    <tt class="py-name">sl</tt> <tt class="py-op">=</tt> <tt id="link-14" class="py-name" targets="Class pod.vecspace.StraightLine=pod.vecspace.StraightLine-class.html"><a title="pod.vecspace.StraightLine" class="py-name" href="#" onclick="return doclink('link-14', 'StraightLine', 'link-14');">StraightLine</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">dimension</tt><tt class="py-op">)</tt> </tt>
<a name="L57"></a><tt class="py-lineno"> 57</tt>  <tt class="py-line">    <tt class="py-name">sl</tt><tt class="py-op">.</tt><tt id="link-15" class="py-name"><a title="pod.vecspace.LinearVariety.init_points" class="py-name" href="#" onclick="return doclink('link-15', 'init_points', 'link-13');">init_points</a></tt><tt class="py-op">(</tt><tt class="py-name">p0</tt><tt class="py-op">,</tt> <tt class="py-name">p1</tt><tt class="py-op">)</tt> </tt>
<a name="L58"></a><tt class="py-lineno"> 58</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">sl</tt> </tt>
</div><a name="L59"></a><tt class="py-lineno"> 59</tt>  <tt class="py-line">     </tt>
<a name="VectorSpace.define_subspace"></a><div id="VectorSpace.define_subspace-def"><a name="L60"></a><tt class="py-lineno"> 60</tt> <a class="py-toggle" href="#" id="VectorSpace.define_subspace-toggle" onclick="return toggle('VectorSpace.define_subspace');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.VectorSpace-class.html#define_subspace">define_subspace</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">a</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSpace.define_subspace-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="VectorSpace.define_subspace-expanded"><a name="L61"></a><tt class="py-lineno"> 61</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">SubVectorSpace</tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">dimension</tt><tt class="py-op">,</tt> <tt class="py-name">a</tt><tt class="py-op">)</tt> </tt>
</div></div><a name="L62"></a><tt class="py-lineno"> 62</tt>  <tt class="py-line"> </tt>
<a name="VectorSpace3D"></a><div id="VectorSpace3D-def"><a name="L63"></a><tt class="py-lineno"> 63</tt> <a class="py-toggle" href="#" id="VectorSpace3D-toggle" onclick="return toggle('VectorSpace3D');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="pod.vecspace.VectorSpace3D-class.html">VectorSpace3D</a><tt class="py-op">(</tt><tt class="py-base-class">VectorSpace</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSpace3D-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="VectorSpace3D-expanded"><a name="L64"></a><tt class="py-lineno"> 64</tt>  <tt class="py-line">  <tt class="py-docstring">"""</tt> </tt>
<a name="L65"></a><tt class="py-lineno"> 65</tt>  <tt class="py-line"><tt class="py-docstring">  Specific Vector space in 3D.</tt> </tt>
<a name="L66"></a><tt class="py-lineno"> 66</tt>  <tt class="py-line"><tt class="py-docstring">  """</tt> </tt>
<a name="L67"></a><tt class="py-lineno"> 67</tt>  <tt class="py-line">   </tt>
<a name="VectorSpace3D.__init__"></a><div id="VectorSpace3D.__init__-def"><a name="L68"></a><tt class="py-lineno"> 68</tt> <a class="py-toggle" href="#" id="VectorSpace3D.__init__-toggle" onclick="return toggle('VectorSpace3D.__init__');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.VectorSpace3D-class.html#__init__">__init__</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSpace3D.__init__-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="VectorSpace3D.__init__-expanded"><a name="L69"></a><tt class="py-lineno"> 69</tt>  <tt class="py-line">    <tt id="link-16" class="py-name" targets="Class pod.vecspace.VectorSpace=pod.vecspace.VectorSpace-class.html"><a title="pod.vecspace.VectorSpace" class="py-name" href="#" onclick="return doclink('link-16', 'VectorSpace', 'link-16');">VectorSpace</a></tt><tt class="py-op">.</tt><tt id="link-17" class="py-name" targets="Method pod.DecompositionBasic.__init__()=pod.DecompositionBasic-class.html#__init__,Method pod.linalg.Matrix.__init__()=pod.linalg.Matrix-class.html#__init__,Method pod.linalg.Point.__init__()=pod.linalg.Point-class.html#__init__,Method pod.linalg.Vector.__init__()=pod.linalg.Vector-class.html#__init__,Method pod.linalg.VectorMatrix.__init__()=pod.linalg.VectorMatrix-class.html#__init__,Method pod.vecspace.HyperPlane.__init__()=pod.vecspace.HyperPlane-class.html#__init__,Method pod.vecspace.LinearVariety.__init__()=pod.vecspace.LinearVariety-class.html#__init__,Method pod.vecspace.Projection.__init__()=pod.vecspace.Projection-class.html#__init__,Method pod.vecspace.StraightLine.__init__()=pod.vecspace.StraightLine-class.html#__init__,Method pod.vecspace.VectorSpace.__init__()=pod.vecspace.VectorSpace-class.html#__init__,Method pod.vecspace.VectorSpace3D.__init__()=pod.vecspace.VectorSpace3D-class.html#__init__,Method pod.vecspace.VectorSubspace.__init__()=pod.vecspace.VectorSubspace-class.html#__init__"><a title="pod.DecompositionBasic.__init__
pod.linalg.Matrix.__init__
pod.linalg.Point.__init__
pod.linalg.Vector.__init__
pod.linalg.VectorMatrix.__init__
pod.vecspace.HyperPlane.__init__
pod.vecspace.LinearVariety.__init__
pod.vecspace.Projection.__init__
pod.vecspace.StraightLine.__init__
pod.vecspace.VectorSpace.__init__
pod.vecspace.VectorSpace3D.__init__
pod.vecspace.VectorSubspace.__init__" class="py-name" href="#" onclick="return doclink('link-17', '__init__', 'link-17');">__init__</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">,</tt> <tt class="py-number">3</tt><tt class="py-op">)</tt> </tt>
</div><a name="L70"></a><tt class="py-lineno"> 70</tt>  <tt class="py-line">   </tt>
<a name="VectorSpace3D.define_plane"></a><div id="VectorSpace3D.define_plane-def"><a name="L71"></a><tt class="py-lineno"> 71</tt> <a class="py-toggle" href="#" id="VectorSpace3D.define_plane-toggle" onclick="return toggle('VectorSpace3D.define_plane');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.VectorSpace3D-class.html#define_plane">define_plane</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">p1</tt><tt class="py-op">,</tt> <tt class="py-param">p2</tt><tt class="py-op">,</tt> <tt class="py-param">p3</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSpace3D.define_plane-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="VectorSpace3D.define_plane-expanded"><a name="L72"></a><tt class="py-lineno"> 72</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L73"></a><tt class="py-lineno"> 73</tt>  <tt class="py-line"><tt class="py-docstring">    Plane in a 3D space given 3 points.</tt> </tt>
<a name="L74"></a><tt class="py-lineno"> 74</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L75"></a><tt class="py-lineno"> 75</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt id="link-18" class="py-name" targets="Method pod.vecspace.VectorSpace.define_hyper_plane()=pod.vecspace.VectorSpace-class.html#define_hyper_plane"><a title="pod.vecspace.VectorSpace.define_hyper_plane" class="py-name" href="#" onclick="return doclink('link-18', 'define_hyper_plane', 'link-18');">define_hyper_plane</a></tt><tt class="py-op">(</tt><tt class="py-name">p1</tt><tt class="py-op">,</tt> <tt class="py-name">p2</tt><tt class="py-op">,</tt> <tt class="py-name">p3</tt><tt class="py-op">)</tt> </tt>
</div></div><a name="L76"></a><tt class="py-lineno"> 76</tt>  <tt class="py-line"> </tt>
<a name="LinearVariety"></a><div id="LinearVariety-def"><a name="L77"></a><tt class="py-lineno"> 77</tt> <a class="py-toggle" href="#" id="LinearVariety-toggle" onclick="return toggle('LinearVariety');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="pod.vecspace.LinearVariety-class.html">LinearVariety</a><tt class="py-op">(</tt><tt class="py-base-class">object</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="LinearVariety-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="LinearVariety-expanded"><a name="L78"></a><tt class="py-lineno"> 78</tt>  <tt class="py-line">  <tt class="py-docstring">"""</tt> </tt>
<a name="L79"></a><tt class="py-lineno"> 79</tt>  <tt class="py-line"><tt class="py-docstring">  A linear variety (or linear manifold or affine subspace) </tt> </tt>
<a name="L80"></a><tt class="py-lineno"> 80</tt>  <tt class="py-line"><tt class="py-docstring">  of a vector space V is a subset closed under affine combinations </tt> </tt>
<a name="L81"></a><tt class="py-lineno"> 81</tt>  <tt class="py-line"><tt class="py-docstring">  of vectors in the space.</tt> </tt>
<a name="L82"></a><tt class="py-lineno"> 82</tt>  <tt class="py-line"><tt class="py-docstring">  </tt> </tt>
<a name="L83"></a><tt class="py-lineno"> 83</tt>  <tt class="py-line"><tt class="py-docstring">  See U{http://en.wikipedia.org/wiki/Affine_space}.</tt> </tt>
<a name="L84"></a><tt class="py-lineno"> 84</tt>  <tt class="py-line"><tt class="py-docstring">  </tt> </tt>
<a name="L85"></a><tt class="py-lineno"> 85</tt>  <tt class="py-line"><tt class="py-docstring">  In the words of mathematical physicist John Baez, "An affine space is a vector </tt> </tt>
<a name="L86"></a><tt class="py-lineno"> 86</tt>  <tt class="py-line"><tt class="py-docstring">  space that's forgotten its origin".</tt> </tt>
<a name="L87"></a><tt class="py-lineno"> 87</tt>  <tt class="py-line"><tt class="py-docstring">  """</tt> </tt>
<a name="L88"></a><tt class="py-lineno"> 88</tt>  <tt class="py-line">   </tt>
<a name="LinearVariety.__init__"></a><div id="LinearVariety.__init__-def"><a name="L89"></a><tt class="py-lineno"> 89</tt> <a class="py-toggle" href="#" id="LinearVariety.__init__-toggle" onclick="return toggle('LinearVariety.__init__');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.LinearVariety-class.html#__init__">__init__</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">space_dimension</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="LinearVariety.__init__-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="LinearVariety.__init__-expanded"><a name="L90"></a><tt class="py-lineno"> 90</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L91"></a><tt class="py-lineno"> 91</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L92"></a><tt class="py-lineno"> 92</tt>  <tt class="py-line">    <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">dimension</tt> <tt class="py-op">=</tt> <tt class="py-name">space_dimension</tt> </tt>
<a name="L93"></a><tt class="py-lineno"> 93</tt>  <tt class="py-line">    <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">variety_dimension</tt> <tt class="py-op">=</tt> <tt class="py-number">0</tt> </tt>
<a name="L94"></a><tt class="py-lineno"> 94</tt>  <tt class="py-line">    <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
</div><a name="L95"></a><tt class="py-lineno"> 95</tt>  <tt class="py-line">       </tt>
<a name="LinearVariety.init_points"></a><div id="LinearVariety.init_points-def"><a name="L96"></a><tt class="py-lineno"> 96</tt> <a class="py-toggle" href="#" id="LinearVariety.init_points-toggle" onclick="return toggle('LinearVariety.init_points');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.LinearVariety-class.html#init_points">init_points</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-op">*</tt><tt class="py-param">points</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="LinearVariety.init_points-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="LinearVariety.init_points-expanded"><a name="L97"></a><tt class="py-lineno"> 97</tt>  <tt class="py-line">    <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt> <tt class="py-op">=</tt> <tt class="py-name">points</tt> </tt>
<a name="L98"></a><tt class="py-lineno"> 98</tt>  <tt class="py-line">    <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">variety_dimension</tt> <tt class="py-op">=</tt> <tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">points</tt><tt class="py-op">)</tt> </tt>
</div><a name="L99"></a><tt class="py-lineno"> 99</tt>  <tt class="py-line">   </tt>
<a name="LinearVariety.get_dimension"></a><div id="LinearVariety.get_dimension-def"><a name="L100"></a><tt class="py-lineno">100</tt> <a class="py-toggle" href="#" id="LinearVariety.get_dimension-toggle" onclick="return toggle('LinearVariety.get_dimension');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.LinearVariety-class.html#get_dimension">get_dimension</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="LinearVariety.get_dimension-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="LinearVariety.get_dimension-expanded"><a name="L101"></a><tt class="py-lineno">101</tt>  <tt class="py-line">    <tt class="py-docstring">""" Dimension of containing space.</tt> </tt>
<a name="L102"></a><tt class="py-lineno">102</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L103"></a><tt class="py-lineno">103</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">dimension</tt> </tt>
</div><a name="L104"></a><tt class="py-lineno">104</tt>  <tt class="py-line">     </tt>
<a name="LinearVariety.get_variety_dimension"></a><div id="LinearVariety.get_variety_dimension-def"><a name="L105"></a><tt class="py-lineno">105</tt> <a class="py-toggle" href="#" id="LinearVariety.get_variety_dimension-toggle" onclick="return toggle('LinearVariety.get_variety_dimension');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.LinearVariety-class.html#get_variety_dimension">get_variety_dimension</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="LinearVariety.get_variety_dimension-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="LinearVariety.get_variety_dimension-expanded"><a name="L106"></a><tt class="py-lineno">106</tt>  <tt class="py-line">    <tt class="py-docstring">""" Dimension of linear variety.</tt> </tt>
<a name="L107"></a><tt class="py-lineno">107</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L108"></a><tt class="py-lineno">108</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">variety_dimension</tt> </tt>
</div><a name="L109"></a><tt class="py-lineno">109</tt>  <tt class="py-line">           </tt>
<a name="LinearVariety.project"></a><div id="LinearVariety.project-def"><a name="L110"></a><tt class="py-lineno">110</tt> <a class="py-toggle" href="#" id="LinearVariety.project-toggle" onclick="return toggle('LinearVariety.project');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.LinearVariety-class.html#project">project</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">point</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="LinearVariety.project-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="LinearVariety.project-expanded"><a name="L111"></a><tt class="py-lineno">111</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L112"></a><tt class="py-lineno">112</tt>  <tt class="py-line"><tt class="py-docstring">    Generalizing projection onto induced subspace.</tt> </tt>
<a name="L113"></a><tt class="py-lineno">113</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L114"></a><tt class="py-lineno">114</tt>  <tt class="py-line">    <tt class="py-name">vectors</tt> <tt class="py-op">=</tt> <tt class="py-op">[</tt><tt class="py-op">]</tt> </tt>
<a name="L115"></a><tt class="py-lineno">115</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">i</tt> <tt class="py-keyword">in</tt> <tt class="py-name">range</tt><tt class="py-op">(</tt><tt class="py-number">1</tt><tt class="py-op">,</tt> <tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L116"></a><tt class="py-lineno">116</tt>  <tt class="py-line">      <tt class="py-name">vectors</tt><tt class="py-op">.</tt><tt class="py-name">append</tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt><tt class="py-op">[</tt><tt class="py-name">i</tt><tt class="py-op">]</tt><tt class="py-op">.</tt><tt id="link-19" class="py-name" targets="Method pod.linalg.Matrix.sub()=pod.linalg.Matrix-class.html#sub,Method pod.linalg.Vector.sub()=pod.linalg.Vector-class.html#sub"><a title="pod.linalg.Matrix.sub
pod.linalg.Vector.sub" class="py-name" href="#" onclick="return doclink('link-19', 'sub', 'link-19');">sub</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L117"></a><tt class="py-lineno">117</tt>  <tt class="py-line">    <tt class="py-name">subspace</tt> <tt class="py-op">=</tt> <tt id="link-20" class="py-name" targets="Class pod.vecspace.VectorSubspace=pod.vecspace.VectorSubspace-class.html"><a title="pod.vecspace.VectorSubspace" class="py-name" href="#" onclick="return doclink('link-20', 'VectorSubspace', 'link-20');">VectorSubspace</a></tt><tt class="py-op">(</tt><tt class="py-op">*</tt><tt class="py-name">vectors</tt><tt class="py-op">)</tt> </tt>
<a name="L118"></a><tt class="py-lineno">118</tt>  <tt class="py-line">    <tt class="py-name">proj</tt> <tt class="py-op">=</tt> <tt class="py-name">subspace</tt><tt class="py-op">.</tt><tt id="link-21" class="py-name" targets="Method pod.vecspace.LinearVariety.project()=pod.vecspace.LinearVariety-class.html#project,Method pod.vecspace.VectorSubspace.project()=pod.vecspace.VectorSubspace-class.html#project"><a title="pod.vecspace.LinearVariety.project
pod.vecspace.VectorSubspace.project" class="py-name" href="#" onclick="return doclink('link-21', 'project', 'link-21');">project</a></tt><tt class="py-op">(</tt><tt class="py-name">point</tt><tt class="py-op">.</tt><tt id="link-22" class="py-name"><a title="pod.linalg.Matrix.sub
pod.linalg.Vector.sub" class="py-name" href="#" onclick="return doclink('link-22', 'sub', 'link-19');">sub</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L119"></a><tt class="py-lineno">119</tt>  <tt class="py-line">    <tt class="py-name">proj</tt><tt class="py-op">.</tt><tt class="py-name">projected</tt> <tt class="py-op">=</tt> <tt class="py-name">proj</tt><tt class="py-op">.</tt><tt class="py-name">projected</tt><tt class="py-op">.</tt><tt id="link-23" class="py-name" targets="Method pod.linalg.Matrix.add()=pod.linalg.Matrix-class.html#add,Method pod.linalg.Vector.add()=pod.linalg.Vector-class.html#add"><a title="pod.linalg.Matrix.add
pod.linalg.Vector.add" class="py-name" href="#" onclick="return doclink('link-23', 'add', 'link-23');">add</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt><tt class="py-op">[</tt><tt class="py-number">0</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L120"></a><tt class="py-lineno">120</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">proj</tt> </tt>
</div><a name="L121"></a><tt class="py-lineno">121</tt>  <tt class="py-line">     </tt>
<a name="LinearVariety.__repr__"></a><div id="LinearVariety.__repr__-def"><a name="L122"></a><tt class="py-lineno">122</tt> <a class="py-toggle" href="#" id="LinearVariety.__repr__-toggle" onclick="return toggle('LinearVariety.__repr__');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.LinearVariety-class.html#__repr__">__repr__</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="LinearVariety.__repr__-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="LinearVariety.__repr__-expanded"><a name="L123"></a><tt class="py-lineno">123</tt>  <tt class="py-line">    <tt class="py-name">out</tt> <tt class="py-op">=</tt> <tt class="py-name">str</tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt><tt class="py-op">)</tt>  </tt>
<a name="L124"></a><tt class="py-lineno">124</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt class="py-name">out</tt> </tt>
</div></div><a name="L125"></a><tt class="py-lineno">125</tt>  <tt class="py-line"> </tt>
<a name="VectorSubspace"></a><div id="VectorSubspace-def"><a name="L126"></a><tt class="py-lineno">126</tt> <a class="py-toggle" href="#" id="VectorSubspace-toggle" onclick="return toggle('VectorSubspace');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="pod.vecspace.VectorSubspace-class.html">VectorSubspace</a><tt class="py-op">(</tt><tt class="py-base-class">object</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSubspace-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="VectorSubspace-expanded"><a name="L127"></a><tt class="py-lineno">127</tt>  <tt class="py-line">  <tt class="py-docstring">"""</tt> </tt>
<a name="L128"></a><tt class="py-lineno">128</tt>  <tt class="py-line"><tt class="py-docstring">  Defines a set on which we can project a point.</tt> </tt>
<a name="L129"></a><tt class="py-lineno">129</tt>  <tt class="py-line"><tt class="py-docstring">  """</tt> </tt>
<a name="L130"></a><tt class="py-lineno">130</tt>  <tt class="py-line">   </tt>
<a name="VectorSubspace.__init__"></a><div id="VectorSubspace.__init__-def"><a name="L131"></a><tt class="py-lineno">131</tt> <a class="py-toggle" href="#" id="VectorSubspace.__init__-toggle" onclick="return toggle('VectorSubspace.__init__');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.VectorSubspace-class.html#__init__">__init__</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-op">*</tt><tt class="py-param">points</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSubspace.__init__-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="VectorSubspace.__init__-expanded"><a name="L132"></a><tt class="py-lineno">132</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L133"></a><tt class="py-lineno">133</tt>  <tt class="py-line"><tt class="py-docstring">    Defining a n-subspace generated by n points.</tt> </tt>
<a name="L134"></a><tt class="py-lineno">134</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L135"></a><tt class="py-lineno">135</tt>  <tt class="py-line">    <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt> <tt class="py-op">=</tt> <tt class="py-name">points</tt> </tt>
</div><a name="L136"></a><tt class="py-lineno">136</tt>  <tt class="py-line"> </tt>
<a name="VectorSubspace.project"></a><div id="VectorSubspace.project-def"><a name="L137"></a><tt class="py-lineno">137</tt> <a class="py-toggle" href="#" id="VectorSubspace.project-toggle" onclick="return toggle('VectorSubspace.project');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.VectorSubspace-class.html#project">project</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">point</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="VectorSubspace.project-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="VectorSubspace.project-expanded"><a name="L138"></a><tt class="py-lineno">138</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L139"></a><tt class="py-lineno">139</tt>  <tt class="py-line"><tt class="py-docstring">    The solution implies (x - x*) perpendicular to each y[i]</tt> </tt>
<a name="L140"></a><tt class="py-lineno">140</tt>  <tt class="py-line"><tt class="py-docstring">    with x* = sum( alpha[i] * y[i] )</tt> </tt>
<a name="L141"></a><tt class="py-lineno">141</tt>  <tt class="py-line"><tt class="py-docstring">    and y[i]: points generating the subspace.</tt> </tt>
<a name="L142"></a><tt class="py-lineno">142</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L143"></a><tt class="py-lineno">143</tt>  <tt class="py-line">    <tt class="py-name">space_dim</tt> <tt class="py-op">=</tt> <tt class="py-name">point</tt><tt class="py-op">.</tt><tt id="link-24" class="py-name" targets="Method pod.linalg.Vector.get_length()=pod.linalg.Vector-class.html#get_length"><a title="pod.linalg.Vector.get_length" class="py-name" href="#" onclick="return doclink('link-24', 'get_length', 'link-24');">get_length</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt> </tt>
<a name="L144"></a><tt class="py-lineno">144</tt>  <tt class="py-line">    <tt class="py-name">subspace_dim</tt> <tt class="py-op">=</tt> <tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt><tt class="py-op">)</tt> </tt>
<a name="L145"></a><tt class="py-lineno">145</tt>  <tt class="py-line">    <tt class="py-name">m</tt> <tt class="py-op">=</tt> <tt id="link-25" class="py-name"><a title="pod.linalg" class="py-name" href="#" onclick="return doclink('link-25', 'linalg', 'link-0');">linalg</a></tt><tt class="py-op">.</tt><tt id="link-26" class="py-name" targets="Class pod.linalg.Matrix=pod.linalg.Matrix-class.html"><a title="pod.linalg.Matrix" class="py-name" href="#" onclick="return doclink('link-26', 'Matrix', 'link-26');">Matrix</a></tt><tt class="py-op">(</tt><tt class="py-name">subspace_dim</tt><tt class="py-op">)</tt> </tt>
<a name="L146"></a><tt class="py-lineno">146</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">row</tt> <tt class="py-keyword">in</tt> <tt class="py-name">range</tt><tt class="py-op">(</tt><tt class="py-name">subspace_dim</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L147"></a><tt class="py-lineno">147</tt>  <tt class="py-line">      <tt class="py-keyword">for</tt> <tt class="py-name">column</tt> <tt class="py-keyword">in</tt> <tt class="py-name">range</tt><tt class="py-op">(</tt><tt class="py-name">row</tt><tt class="py-op">,</tt> <tt class="py-name">subspace_dim</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L148"></a><tt class="py-lineno">148</tt>  <tt class="py-line">        <tt class="py-name">value</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt><tt class="py-op">[</tt><tt class="py-name">row</tt><tt class="py-op">]</tt><tt class="py-op">.</tt><tt id="link-27" class="py-name" targets="Method pod.linalg.Vector.product()=pod.linalg.Vector-class.html#product"><a title="pod.linalg.Vector.product" class="py-name" href="#" onclick="return doclink('link-27', 'product', 'link-27');">product</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt><tt class="py-op">[</tt><tt class="py-name">column</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L149"></a><tt class="py-lineno">149</tt>  <tt class="py-line">        <tt class="py-name">m</tt><tt class="py-op">.</tt><tt id="link-28" class="py-name" targets="Method pod.linalg.Matrix.set_value()=pod.linalg.Matrix-class.html#set_value"><a title="pod.linalg.Matrix.set_value" class="py-name" href="#" onclick="return doclink('link-28', 'set_value', 'link-28');">set_value</a></tt><tt class="py-op">(</tt><tt class="py-name">row</tt><tt class="py-op">,</tt> <tt class="py-name">column</tt><tt class="py-op">,</tt> <tt class="py-name">value</tt><tt class="py-op">)</tt> </tt>
<a name="L150"></a><tt class="py-lineno">150</tt>  <tt class="py-line">        <tt class="py-keyword">if</tt> <tt class="py-name">column</tt> <tt class="py-op">!=</tt> <tt class="py-name">row</tt><tt class="py-op">:</tt> </tt>
<a name="L151"></a><tt class="py-lineno">151</tt>  <tt class="py-line">          <tt class="py-name">m</tt><tt class="py-op">.</tt><tt id="link-29" class="py-name"><a title="pod.linalg.Matrix.set_value" class="py-name" href="#" onclick="return doclink('link-29', 'set_value', 'link-28');">set_value</a></tt><tt class="py-op">(</tt><tt class="py-name">column</tt><tt class="py-op">,</tt> <tt class="py-name">row</tt><tt class="py-op">,</tt> <tt class="py-name">value</tt><tt class="py-op">)</tt> </tt>
<a name="L152"></a><tt class="py-lineno">152</tt>  <tt class="py-line">    <tt class="py-name">b</tt> <tt class="py-op">=</tt> <tt id="link-30" class="py-name"><a title="pod.linalg" class="py-name" href="#" onclick="return doclink('link-30', 'linalg', 'link-0');">linalg</a></tt><tt class="py-op">.</tt><tt id="link-31" class="py-name" targets="Class pod.linalg.Vector=pod.linalg.Vector-class.html"><a title="pod.linalg.Vector" class="py-name" href="#" onclick="return doclink('link-31', 'Vector', 'link-31');">Vector</a></tt><tt class="py-op">(</tt><tt class="py-name">subspace_dim</tt><tt class="py-op">)</tt> </tt>
<a name="L153"></a><tt class="py-lineno">153</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">row</tt> <tt class="py-keyword">in</tt> <tt class="py-name">range</tt><tt class="py-op">(</tt><tt class="py-name">subspace_dim</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L154"></a><tt class="py-lineno">154</tt>  <tt class="py-line">      <tt class="py-name">value</tt> <tt class="py-op">=</tt> <tt class="py-name">point</tt><tt class="py-op">.</tt><tt id="link-32" class="py-name"><a title="pod.linalg.Vector.product" class="py-name" href="#" onclick="return doclink('link-32', 'product', 'link-27');">product</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt><tt class="py-op">[</tt><tt class="py-name">row</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L155"></a><tt class="py-lineno">155</tt>  <tt class="py-line">      <tt class="py-name">b</tt><tt class="py-op">.</tt><tt id="link-33" class="py-name" targets="Method pod.linalg.Vector.set_component()=pod.linalg.Vector-class.html#set_component"><a title="pod.linalg.Vector.set_component" class="py-name" href="#" onclick="return doclink('link-33', 'set_component', 'link-33');">set_component</a></tt><tt class="py-op">(</tt><tt class="py-name">row</tt><tt class="py-op">,</tt> <tt class="py-name">value</tt><tt class="py-op">)</tt> </tt>
<a name="L156"></a><tt class="py-lineno">156</tt>  <tt class="py-line">    <tt class="py-name">alphas</tt> <tt class="py-op">=</tt> <tt id="link-34" class="py-name"><a title="pod.util" class="py-name" href="#" onclick="return doclink('link-34', 'util', 'link-1');">util</a></tt><tt class="py-op">.</tt><tt id="link-35" class="py-name" targets="Function pod.util.system_solve()=pod.util-module.html#system_solve"><a title="pod.util.system_solve" class="py-name" href="#" onclick="return doclink('link-35', 'system_solve', 'link-35');">system_solve</a></tt><tt class="py-op">(</tt><tt class="py-name">m</tt><tt class="py-op">.</tt><tt id="link-36" class="py-name" targets="Method pod.linalg.Matrix.get_table()=pod.linalg.Matrix-class.html#get_table"><a title="pod.linalg.Matrix.get_table" class="py-name" href="#" onclick="return doclink('link-36', 'get_table', 'link-36');">get_table</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">,</tt> <tt class="py-name">b</tt><tt class="py-op">.</tt><tt id="link-37" class="py-name" targets="Method pod.linalg.Vector.get_data()=pod.linalg.Vector-class.html#get_data"><a title="pod.linalg.Vector.get_data" class="py-name" href="#" onclick="return doclink('link-37', 'get_data', 'link-37');">get_data</a></tt><tt class="py-op">(</tt><tt class="py-op">)</tt><tt class="py-op">)</tt> </tt>
<a name="L157"></a><tt class="py-lineno">157</tt>  <tt class="py-line">    <tt class="py-name">result</tt> <tt class="py-op">=</tt> <tt id="link-38" class="py-name"><a title="pod.linalg" class="py-name" href="#" onclick="return doclink('link-38', 'linalg', 'link-0');">linalg</a></tt><tt class="py-op">.</tt><tt id="link-39" class="py-name"><a title="pod.linalg.zero" class="py-name" href="#" onclick="return doclink('link-39', 'zero', 'link-9');">zero</a></tt><tt class="py-op">(</tt><tt class="py-name">space_dim</tt><tt class="py-op">)</tt> </tt>
<a name="L158"></a><tt class="py-lineno">158</tt>  <tt class="py-line">    <tt class="py-keyword">for</tt> <tt class="py-name">i</tt> <tt class="py-keyword">in</tt> <tt class="py-name">range</tt><tt class="py-op">(</tt><tt class="py-name">len</tt><tt class="py-op">(</tt><tt class="py-name">alphas</tt><tt class="py-op">)</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
<a name="L159"></a><tt class="py-lineno">159</tt>  <tt class="py-line">      <tt class="py-name">component</tt> <tt class="py-op">=</tt> <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">points</tt><tt class="py-op">[</tt><tt class="py-name">i</tt><tt class="py-op">]</tt><tt class="py-op">.</tt><tt id="link-40" class="py-name" targets="Method pod.linalg.Matrix.scale()=pod.linalg.Matrix-class.html#scale,Method pod.linalg.Vector.scale()=pod.linalg.Vector-class.html#scale"><a title="pod.linalg.Matrix.scale
pod.linalg.Vector.scale" class="py-name" href="#" onclick="return doclink('link-40', 'scale', 'link-40');">scale</a></tt><tt class="py-op">(</tt><tt class="py-name">alphas</tt><tt class="py-op">[</tt><tt class="py-name">i</tt><tt class="py-op">]</tt><tt class="py-op">)</tt> </tt>
<a name="L160"></a><tt class="py-lineno">160</tt>  <tt class="py-line">      <tt class="py-name">result</tt> <tt class="py-op">=</tt> <tt class="py-name">result</tt><tt class="py-op">.</tt><tt id="link-41" class="py-name"><a title="pod.linalg.Matrix.add
pod.linalg.Vector.add" class="py-name" href="#" onclick="return doclink('link-41', 'add', 'link-23');">add</a></tt><tt class="py-op">(</tt><tt class="py-name">component</tt><tt class="py-op">)</tt> </tt>
<a name="L161"></a><tt class="py-lineno">161</tt>  <tt class="py-line">    <tt class="py-keyword">return</tt> <tt id="link-42" class="py-name" targets="Class pod.vecspace.Projection=pod.vecspace.Projection-class.html"><a title="pod.vecspace.Projection" class="py-name" href="#" onclick="return doclink('link-42', 'Projection', 'link-42');">Projection</a></tt><tt class="py-op">(</tt><tt class="py-name">result</tt><tt class="py-op">,</tt> <tt class="py-name">point</tt><tt class="py-op">)</tt> </tt>
</div></div><a name="L162"></a><tt class="py-lineno">162</tt>  <tt class="py-line">     </tt>
<a name="Projection"></a><div id="Projection-def"><a name="L163"></a><tt class="py-lineno">163</tt> <a class="py-toggle" href="#" id="Projection-toggle" onclick="return toggle('Projection');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="pod.vecspace.Projection-class.html">Projection</a><tt class="py-op">(</tt><tt class="py-base-class">object</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Projection-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="Projection-expanded"><a name="L164"></a><tt class="py-lineno">164</tt>  <tt class="py-line">  <tt class="py-docstring">"""</tt> </tt>
<a name="L165"></a><tt class="py-lineno">165</tt>  <tt class="py-line"><tt class="py-docstring">  Simple container gathering details about projection.</tt> </tt>
<a name="L166"></a><tt class="py-lineno">166</tt>  <tt class="py-line"><tt class="py-docstring">  """</tt> </tt>
<a name="Projection.__init__"></a><div id="Projection.__init__-def"><a name="L167"></a><tt class="py-lineno">167</tt> <a class="py-toggle" href="#" id="Projection.__init__-toggle" onclick="return toggle('Projection.__init__');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.Projection-class.html#__init__">__init__</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">projected</tt><tt class="py-op">,</tt> <tt class="py-param">start</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="Projection.__init__-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="Projection.__init__-expanded"><a name="L168"></a><tt class="py-lineno">168</tt>  <tt class="py-line">    <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">projected</tt> <tt class="py-op">=</tt> <tt class="py-name">projected</tt> </tt>
<a name="L169"></a><tt class="py-lineno">169</tt>  <tt class="py-line">    <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">start</tt> <tt class="py-op">=</tt> <tt class="py-name">start</tt> </tt>
<a name="L170"></a><tt class="py-lineno">170</tt>  <tt class="py-line">    <tt class="py-name">self</tt><tt class="py-op">.</tt><tt class="py-name">projector</tt> <tt class="py-op">=</tt> <tt class="py-name">projected</tt><tt class="py-op">.</tt><tt id="link-43" class="py-name"><a title="pod.linalg.Matrix.sub
pod.linalg.Vector.sub" class="py-name" href="#" onclick="return doclink('link-43', 'sub', 'link-19');">sub</a></tt><tt class="py-op">(</tt><tt class="py-name">start</tt><tt class="py-op">)</tt> </tt>
</div></div><a name="L171"></a><tt class="py-lineno">171</tt>  <tt class="py-line">     </tt>
<a name="StraightLine"></a><div id="StraightLine-def"><a name="L172"></a><tt class="py-lineno">172</tt> <a class="py-toggle" href="#" id="StraightLine-toggle" onclick="return toggle('StraightLine');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="pod.vecspace.StraightLine-class.html">StraightLine</a><tt class="py-op">(</tt><tt class="py-base-class">LinearVariety</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="StraightLine-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="StraightLine-expanded"><a name="L173"></a><tt class="py-lineno">173</tt>  <tt class="py-line">  <tt class="py-docstring">"""</tt> </tt>
<a name="L174"></a><tt class="py-lineno">174</tt>  <tt class="py-line"><tt class="py-docstring">  Linear variety of dimension 1.</tt> </tt>
<a name="L175"></a><tt class="py-lineno">175</tt>  <tt class="py-line"><tt class="py-docstring">  </tt> </tt>
<a name="L176"></a><tt class="py-lineno">176</tt>  <tt class="py-line"><tt class="py-docstring">  It is defined by a (n-1) linear equations or 2 points.</tt> </tt>
<a name="L177"></a><tt class="py-lineno">177</tt>  <tt class="py-line"><tt class="py-docstring">  """</tt> </tt>
<a name="StraightLine.__init__"></a><div id="StraightLine.__init__-def"><a name="L178"></a><tt class="py-lineno">178</tt> <a class="py-toggle" href="#" id="StraightLine.__init__-toggle" onclick="return toggle('StraightLine.__init__');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.StraightLine-class.html#__init__">__init__</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">dim</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="StraightLine.__init__-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="StraightLine.__init__-expanded"><a name="L179"></a><tt class="py-lineno">179</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L180"></a><tt class="py-lineno">180</tt>  <tt class="py-line"><tt class="py-docstring">    @param dim: space dimension</tt> </tt>
<a name="L181"></a><tt class="py-lineno">181</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L182"></a><tt class="py-lineno">182</tt>  <tt class="py-line">    <tt id="link-44" class="py-name" targets="Class pod.vecspace.LinearVariety=pod.vecspace.LinearVariety-class.html"><a title="pod.vecspace.LinearVariety" class="py-name" href="#" onclick="return doclink('link-44', 'LinearVariety', 'link-44');">LinearVariety</a></tt><tt class="py-op">.</tt><tt id="link-45" class="py-name"><a title="pod.DecompositionBasic.__init__
pod.linalg.Matrix.__init__
pod.linalg.Point.__init__
pod.linalg.Vector.__init__
pod.linalg.VectorMatrix.__init__
pod.vecspace.HyperPlane.__init__
pod.vecspace.LinearVariety.__init__
pod.vecspace.Projection.__init__
pod.vecspace.StraightLine.__init__
pod.vecspace.VectorSpace.__init__
pod.vecspace.VectorSpace3D.__init__
pod.vecspace.VectorSubspace.__init__" class="py-name" href="#" onclick="return doclink('link-45', '__init__', 'link-17');">__init__</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">,</tt> <tt class="py-name">dim</tt><tt class="py-op">)</tt> </tt>
</div></div><a name="L183"></a><tt class="py-lineno">183</tt>  <tt class="py-line">     </tt>
<a name="HyperPlane"></a><div id="HyperPlane-def"><a name="L184"></a><tt class="py-lineno">184</tt> <a class="py-toggle" href="#" id="HyperPlane-toggle" onclick="return toggle('HyperPlane');">-</a><tt class="py-line"><tt class="py-keyword">class</tt> <a class="py-def-name" href="pod.vecspace.HyperPlane-class.html">HyperPlane</a><tt class="py-op">(</tt><tt class="py-base-class">LinearVariety</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="HyperPlane-collapsed" style="display:none;" pad="+++" indent="++++"></div><div id="HyperPlane-expanded"><a name="L185"></a><tt class="py-lineno">185</tt>  <tt class="py-line">  <tt class="py-docstring">"""</tt> </tt>
<a name="L186"></a><tt class="py-lineno">186</tt>  <tt class="py-line"><tt class="py-docstring">  Linear variety of dimension (n-1).</tt> </tt>
<a name="L187"></a><tt class="py-lineno">187</tt>  <tt class="py-line"><tt class="py-docstring">  </tt> </tt>
<a name="L188"></a><tt class="py-lineno">188</tt>  <tt class="py-line"><tt class="py-docstring">  It is defined by a single linear equation.</tt> </tt>
<a name="L189"></a><tt class="py-lineno">189</tt>  <tt class="py-line"><tt class="py-docstring">  """</tt> </tt>
<a name="L190"></a><tt class="py-lineno">190</tt>  <tt class="py-line">   </tt>
<a name="HyperPlane.__init__"></a><div id="HyperPlane.__init__-def"><a name="L191"></a><tt class="py-lineno">191</tt> <a class="py-toggle" href="#" id="HyperPlane.__init__-toggle" onclick="return toggle('HyperPlane.__init__');">-</a><tt class="py-line">  <tt class="py-keyword">def</tt> <a class="py-def-name" href="pod.vecspace.HyperPlane-class.html#__init__">__init__</a><tt class="py-op">(</tt><tt class="py-param">self</tt><tt class="py-op">,</tt> <tt class="py-param">dim</tt><tt class="py-op">)</tt><tt class="py-op">:</tt> </tt>
</div><div id="HyperPlane.__init__-collapsed" style="display:none;" pad="+++" indent="++++++"></div><div id="HyperPlane.__init__-expanded"><a name="L192"></a><tt class="py-lineno">192</tt>  <tt class="py-line">    <tt class="py-docstring">"""</tt> </tt>
<a name="L193"></a><tt class="py-lineno">193</tt>  <tt class="py-line"><tt class="py-docstring">    @param dim: space dimension</tt> </tt>
<a name="L194"></a><tt class="py-lineno">194</tt>  <tt class="py-line"><tt class="py-docstring">    """</tt> </tt>
<a name="L195"></a><tt class="py-lineno">195</tt>  <tt class="py-line">    <tt id="link-46" class="py-name"><a title="pod.vecspace.LinearVariety" class="py-name" href="#" onclick="return doclink('link-46', 'LinearVariety', 'link-44');">LinearVariety</a></tt><tt class="py-op">.</tt><tt id="link-47" class="py-name"><a title="pod.DecompositionBasic.__init__
pod.linalg.Matrix.__init__
pod.linalg.Point.__init__
pod.linalg.Vector.__init__
pod.linalg.VectorMatrix.__init__
pod.vecspace.HyperPlane.__init__
pod.vecspace.LinearVariety.__init__
pod.vecspace.Projection.__init__
pod.vecspace.StraightLine.__init__
pod.vecspace.VectorSpace.__init__
pod.vecspace.VectorSpace3D.__init__
pod.vecspace.VectorSubspace.__init__" class="py-name" href="#" onclick="return doclink('link-47', '__init__', 'link-17');">__init__</a></tt><tt class="py-op">(</tt><tt class="py-name">self</tt><tt class="py-op">,</tt> <tt class="py-name">dim</tt><tt class="py-op">)</tt> </tt>
</div></div><a name="L196"></a><tt class="py-lineno">196</tt>  <tt class="py-line"> </tt><script type="text/javascript">
<!--
expandto(location.href);
// -->
</script>
</pre>
<br />
<!-- ==================== NAVIGATION BAR ==================== -->
<table class="navbar" border="0" width="100%" cellpadding="0"
       bgcolor="#a0c0ff" cellspacing="0">
  <tr valign="middle">
  <!-- Home link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="pod-module.html">Home</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Tree link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="module-tree.html">Trees</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Index link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="identifier-index.html">Indices</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Help link -->
      <th>&nbsp;&nbsp;&nbsp;<a
        href="help.html">Help</a>&nbsp;&nbsp;&nbsp;</th>

  <!-- Project homepage -->
      <th class="navbar" align="right" width="100%">
        <table border="0" cellpadding="0" cellspacing="0">
          <tr><th class="navbar" align="center"
            ><a class="navbar" target="_top" href="https://code.google.com/p/py-pod/">py-pod</a></th>
          </tr></table></th>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" width="100%%">
  <tr>
    <td align="left" class="footer">
    Generated by Epydoc 3.0.1 on Thu Aug 04 16:36:46 2011
    </td>
    <td align="right" class="footer">
      <a target="mainFrame" href="http://epydoc.sourceforge.net"
        >http://epydoc.sourceforge.net</a>
    </td>
  </tr>
</table>

<script type="text/javascript">
  <!--
  // Private objects are initially displayed (because if
  // javascript is turned off then we want them to be
  // visible); but by default, we want to hide them.  So hide
  // them unless we have a cookie that says to show them.
  checkCookie();
  // -->
</script>
</body>
</html>
